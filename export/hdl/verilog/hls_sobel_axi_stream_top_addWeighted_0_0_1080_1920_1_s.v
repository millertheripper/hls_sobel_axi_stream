// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_sobel_axi_stream_top_addWeighted_0_0_1080_1920_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_buf_1a_474_dout,
        img_buf_1a_474_empty_n,
        img_buf_1a_474_read,
        img_buf_1b_475_dout,
        img_buf_1b_475_empty_n,
        img_buf_1b_475_read,
        img_buf_2_476_din,
        img_buf_2_476_full_n,
        img_buf_2_476_write,
        src1_1_dout,
        src1_1_empty_n,
        src1_1_read,
        src1_2_dout,
        src1_2_empty_n,
        src1_2_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] img_buf_1a_474_dout;
input   img_buf_1a_474_empty_n;
output   img_buf_1a_474_read;
input  [7:0] img_buf_1b_475_dout;
input   img_buf_1b_475_empty_n;
output   img_buf_1b_475_read;
output  [7:0] img_buf_2_476_din;
input   img_buf_2_476_full_n;
output   img_buf_2_476_write;
input  [31:0] src1_1_dout;
input   src1_1_empty_n;
output   src1_1_read;
input  [31:0] src1_2_dout;
input   src1_2_empty_n;
output   src1_2_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_buf_1a_474_read;
reg img_buf_1b_475_read;
reg img_buf_2_476_write;
reg src1_1_read;
reg src1_2_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src1_1_blk_n;
reg    src1_2_blk_n;
wire   [15:0] width_fu_56_p1;
reg   [15:0] width_reg_66;
reg    ap_block_state1;
wire   [15:0] trunc_ln123_fu_61_p1;
reg   [15:0] trunc_ln123_reg_71;
wire    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start;
wire    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done;
wire    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_idle;
wire    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_ready;
wire    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1a_474_read;
wire    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1b_475_read;
wire   [7:0] grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_din;
wire    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_write;
reg    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg;
reg    ap_block_state1_ignore_call12;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg = 1'b0;
end

hls_sobel_axi_stream_top_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start),
    .ap_done(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done),
    .ap_idle(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_idle),
    .ap_ready(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_ready),
    .img_buf_1a_474_dout(img_buf_1a_474_dout),
    .img_buf_1a_474_empty_n(img_buf_1a_474_empty_n),
    .img_buf_1a_474_read(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1a_474_read),
    .img_buf_1b_475_dout(img_buf_1b_475_dout),
    .img_buf_1b_475_empty_n(img_buf_1b_475_empty_n),
    .img_buf_1b_475_read(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1b_475_read),
    .img_buf_2_476_din(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_din),
    .img_buf_2_476_full_n(img_buf_2_476_full_n),
    .img_buf_2_476_write(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_write),
    .height(trunc_ln123_reg_71),
    .width(width_reg_66)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (src1_2_empty_n == 1'b0) | (src1_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg <= 1'b1;
        end else if ((grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_ready == 1'b1)) begin
            grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (src1_2_empty_n == 1'b0) | (src1_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln123_reg_71 <= trunc_ln123_fu_61_p1;
        width_reg_66 <= width_fu_56_p1;
    end
end

always @ (*) begin
    if (((grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_buf_1a_474_read = grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1a_474_read;
    end else begin
        img_buf_1a_474_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_buf_1b_475_read = grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1b_475_read;
    end else begin
        img_buf_1b_475_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_buf_2_476_write = grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_write;
    end else begin
        img_buf_2_476_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src1_1_blk_n = src1_1_empty_n;
    end else begin
        src1_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (src1_2_empty_n == 1'b0) | (src1_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src1_1_read = 1'b1;
    end else begin
        src1_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src1_2_blk_n = src1_2_empty_n;
    end else begin
        src1_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (src1_2_empty_n == 1'b0) | (src1_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src1_2_read = 1'b1;
    end else begin
        src1_2_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (src1_2_empty_n == 1'b0) | (src1_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (src1_2_empty_n == 1'b0) | (src1_1_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call12 = ((ap_start == 1'b0) | (src1_2_empty_n == 1'b0) | (src1_1_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start = grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg;

assign img_buf_2_476_din = grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_din;

assign trunc_ln123_fu_61_p1 = src1_1_dout[15:0];

assign width_fu_56_p1 = src1_2_dout[15:0];

endmodule //hls_sobel_axi_stream_top_addWeighted_0_0_1080_1920_1_s
