// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_sobel_axi_stream_top_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_buf_1a_474_dout,
        img_buf_1a_474_empty_n,
        img_buf_1a_474_read,
        img_buf_1b_475_dout,
        img_buf_1b_475_empty_n,
        img_buf_1b_475_read,
        img_buf_2_476_din,
        img_buf_2_476_full_n,
        img_buf_2_476_write,
        height,
        width
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] img_buf_1a_474_dout;
input   img_buf_1a_474_empty_n;
output   img_buf_1a_474_read;
input  [7:0] img_buf_1b_475_dout;
input   img_buf_1b_475_empty_n;
output   img_buf_1b_475_read;
output  [7:0] img_buf_2_476_din;
input   img_buf_2_476_full_n;
output   img_buf_2_476_write;
input  [15:0] height;
input  [15:0] width;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_buf_1a_474_read;
reg img_buf_1b_475_read;
reg img_buf_2_476_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_buf_1a_474_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln68_reg_186;
reg    img_buf_1b_475_blk_n;
reg    img_buf_2_476_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln68_reg_186_pp0_iter1_reg;
reg   [15:0] empty_84_reg_96;
wire   [0:0] icmp_ln882_fu_111_p2;
wire    ap_CS_fsm_state2;
wire   [12:0] add_ln695_fu_116_p2;
reg   [12:0] add_ln695_reg_181;
wire   [0:0] icmp_ln68_fu_122_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] add_ln882_fu_127_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] add_ln92_fu_161_p2;
reg   [7:0] add_ln92_reg_195;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [12:0] empty_reg_85;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln882_fu_107_p1;
wire   [6:0] tmp_fu_133_p4;
wire   [6:0] tmp_1_fu_143_p4;
wire   [7:0] zext_ln92_1_fu_157_p1;
wire   [7:0] zext_ln92_fu_153_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln882_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln882_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_122_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        empty_84_reg_96 <= add_ln882_fu_127_p2;
    end else if (((icmp_ln882_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_84_reg_96 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        empty_reg_85 <= add_ln695_reg_181;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_85 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln695_reg_181 <= add_ln695_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_reg_186 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln92_reg_195 <= add_ln92_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln68_reg_186 <= icmp_ln68_fu_122_p2;
        icmp_ln68_reg_186_pp0_iter1_reg <= icmp_ln68_reg_186;
    end
end

always @ (*) begin
    if ((icmp_ln68_fu_122_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln882_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln882_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_186 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_buf_1a_474_blk_n = img_buf_1a_474_empty_n;
    end else begin
        img_buf_1a_474_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_186 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_buf_1a_474_read = 1'b1;
    end else begin
        img_buf_1a_474_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_186 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_buf_1b_475_blk_n = img_buf_1b_475_empty_n;
    end else begin
        img_buf_1b_475_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_186 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_buf_1b_475_read = 1'b1;
    end else begin
        img_buf_1b_475_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_186_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        img_buf_2_476_blk_n = img_buf_2_476_full_n;
    end else begin
        img_buf_2_476_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_186_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_buf_2_476_write = 1'b1;
    end else begin
        img_buf_2_476_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln882_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln68_fu_122_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln68_fu_122_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln695_fu_116_p2 = (empty_reg_85 + 13'd1);

assign add_ln882_fu_127_p2 = (empty_84_reg_96 + 16'd1);

assign add_ln92_fu_161_p2 = (zext_ln92_1_fu_157_p1 + zext_ln92_fu_153_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln68_reg_186_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (img_buf_2_476_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln68_reg_186 == 1'd0) & (img_buf_1b_475_empty_n == 1'b0)) | ((icmp_ln68_reg_186 == 1'd0) & (img_buf_1a_474_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln68_reg_186_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (img_buf_2_476_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln68_reg_186 == 1'd0) & (img_buf_1b_475_empty_n == 1'b0)) | ((icmp_ln68_reg_186 == 1'd0) & (img_buf_1a_474_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln68_reg_186_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (img_buf_2_476_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln68_reg_186 == 1'd0) & (img_buf_1b_475_empty_n == 1'b0)) | ((icmp_ln68_reg_186 == 1'd0) & (img_buf_1a_474_empty_n == 1'b0)))));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln68_reg_186 == 1'd0) & (img_buf_1b_475_empty_n == 1'b0)) | ((icmp_ln68_reg_186 == 1'd0) & (img_buf_1a_474_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln68_reg_186_pp0_iter1_reg == 1'd0) & (img_buf_2_476_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln68_fu_122_p2 = ((empty_84_reg_96 == width) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_111_p2 = ((zext_ln882_fu_107_p1 < height) ? 1'b1 : 1'b0);

assign img_buf_2_476_din = add_ln92_reg_195;

assign tmp_1_fu_143_p4 = {{img_buf_1b_475_dout[7:1]}};

assign tmp_fu_133_p4 = {{img_buf_1a_474_dout[7:1]}};

assign zext_ln882_fu_107_p1 = empty_reg_85;

assign zext_ln92_1_fu_157_p1 = tmp_1_fu_143_p4;

assign zext_ln92_fu_153_p1 = tmp_fu_133_p4;

endmodule //hls_sobel_axi_stream_top_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s
