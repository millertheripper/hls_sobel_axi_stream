// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_sobel_axi_stream_top_gray2bgr_0_9_1080_1920_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_buf_2_476_dout,
        img_buf_2_476_empty_n,
        img_buf_2_476_read,
        img_buf_3_477_din,
        img_buf_3_477_full_n,
        img_buf_3_477_write,
        p_src_1_dout,
        p_src_1_empty_n,
        p_src_1_read,
        p_src_2_dout,
        p_src_2_empty_n,
        p_src_2_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] img_buf_2_476_dout;
input   img_buf_2_476_empty_n;
output   img_buf_2_476_read;
output  [23:0] img_buf_3_477_din;
input   img_buf_3_477_full_n;
output   img_buf_3_477_write;
input  [31:0] p_src_1_dout;
input   p_src_1_empty_n;
output   p_src_1_read;
input  [31:0] p_src_2_dout;
input   p_src_2_empty_n;
output   p_src_2_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_buf_2_476_read;
reg img_buf_3_477_write;
reg p_src_1_read;
reg p_src_2_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_buf_2_476_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln4942_reg_171;
reg    img_buf_3_477_blk_n;
reg    p_src_1_blk_n;
reg    p_src_2_blk_n;
reg   [15:0] empty_59_reg_96;
wire   [15:0] height_fu_107_p1;
reg   [15:0] height_reg_152;
reg    ap_block_state1;
wire   [15:0] width_fu_111_p1;
reg   [15:0] width_reg_157;
wire   [0:0] icmp_ln882_fu_119_p2;
wire    ap_CS_fsm_state2;
wire   [12:0] add_ln695_fu_124_p2;
reg   [12:0] add_ln695_reg_166;
wire   [0:0] icmp_ln4942_fu_130_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] add_ln882_fu_135_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [12:0] empty_reg_85;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln882_fu_115_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln882_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln882_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln882_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4942_fu_130_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        empty_59_reg_96 <= add_ln882_fu_135_p2;
    end else if (((icmp_ln882_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_59_reg_96 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_reg_85 <= add_ln695_reg_166;
    end else if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_85 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln695_reg_166 <= add_ln695_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_reg_152 <= height_fu_107_p1;
        width_reg_157 <= width_fu_111_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln4942_reg_171 <= icmp_ln4942_fu_130_p2;
    end
end

always @ (*) begin
    if ((icmp_ln4942_fu_130_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln882_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln882_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln4942_reg_171 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_buf_2_476_blk_n = img_buf_2_476_empty_n;
    end else begin
        img_buf_2_476_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln4942_reg_171 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_buf_2_476_read = 1'b1;
    end else begin
        img_buf_2_476_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln4942_reg_171 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_buf_3_477_blk_n = img_buf_3_477_full_n;
    end else begin
        img_buf_3_477_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln4942_reg_171 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_buf_3_477_write = 1'b1;
    end else begin
        img_buf_3_477_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_1_blk_n = p_src_1_empty_n;
    end else begin
        p_src_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_1_read = 1'b1;
    end else begin
        p_src_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_2_blk_n = p_src_2_empty_n;
    end else begin
        p_src_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_2_read = 1'b1;
    end else begin
        p_src_2_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln882_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln4942_fu_130_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln4942_fu_130_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln695_fu_124_p2 = (empty_reg_85 + 13'd1);

assign add_ln882_fu_135_p2 = (empty_59_reg_96 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln4942_reg_171 == 1'd0) & (img_buf_3_477_full_n == 1'b0)) | ((icmp_ln4942_reg_171 == 1'd0) & (img_buf_2_476_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln4942_reg_171 == 1'd0) & (img_buf_3_477_full_n == 1'b0)) | ((icmp_ln4942_reg_171 == 1'd0) & (img_buf_2_476_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln4942_reg_171 == 1'd0) & (img_buf_3_477_full_n == 1'b0)) | ((icmp_ln4942_reg_171 == 1'd0) & (img_buf_2_476_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln4942_reg_171 == 1'd0) & (img_buf_3_477_full_n == 1'b0)) | ((icmp_ln4942_reg_171 == 1'd0) & (img_buf_2_476_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign height_fu_107_p1 = p_src_1_dout[15:0];

assign icmp_ln4942_fu_130_p2 = ((empty_59_reg_96 == width_reg_157) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_119_p2 = ((zext_ln882_fu_115_p1 < height_reg_152) ? 1'b1 : 1'b0);

assign img_buf_3_477_din = {{{img_buf_2_476_dout}, {img_buf_2_476_dout}}, {img_buf_2_476_dout}};

assign width_fu_111_p1 = p_src_2_dout[15:0];

assign zext_ln882_fu_115_p1 = empty_reg_85;

endmodule //hls_sobel_axi_stream_top_gray2bgr_0_9_1080_1920_1_s
