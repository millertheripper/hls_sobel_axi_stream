// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_sobel_axi_stream_top_AXIvideo2xfMat_24_9_1080_1920_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_buf_0_472_din,
        img_buf_0_472_full_n,
        img_buf_0_472_write,
        p_src_TDATA,
        p_src_TVALID,
        p_src_TREADY,
        p_src_TKEEP,
        p_src_TSTRB,
        p_src_TUSER,
        p_src_TLAST,
        p_src_TID,
        p_src_TDEST,
        img_1_dout,
        img_1_empty_n,
        img_1_read,
        img_2_dout,
        img_2_empty_n,
        img_2_read,
        img_1_out_din,
        img_1_out_full_n,
        img_1_out_write,
        img_2_out_din,
        img_2_out_full_n,
        img_2_out_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_state8 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [23:0] img_buf_0_472_din;
input   img_buf_0_472_full_n;
output   img_buf_0_472_write;
input  [23:0] p_src_TDATA;
input   p_src_TVALID;
output   p_src_TREADY;
input  [2:0] p_src_TKEEP;
input  [2:0] p_src_TSTRB;
input  [0:0] p_src_TUSER;
input  [0:0] p_src_TLAST;
input  [0:0] p_src_TID;
input  [0:0] p_src_TDEST;
input  [31:0] img_1_dout;
input   img_1_empty_n;
output   img_1_read;
input  [31:0] img_2_dout;
input   img_2_empty_n;
output   img_2_read;
output  [31:0] img_1_out_din;
input   img_1_out_full_n;
output   img_1_out_write;
output  [31:0] img_2_out_din;
input   img_2_out_full_n;
output   img_2_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_buf_0_472_write;
reg img_1_read;
reg img_2_read;
reg img_1_out_write;
reg img_2_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_buf_0_472_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln132_reg_443;
reg    p_src_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln132_fu_372_p2;
wire   [0:0] or_ln138_fu_383_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] ap_phi_mux_last_1_phi_fu_319_p4;
reg    img_1_blk_n;
reg    img_2_blk_n;
reg    img_1_out_blk_n;
reg    img_2_out_blk_n;
reg   [0:0] axi_last_V_1_reg_174;
reg   [23:0] axi_data_V_1_reg_185;
reg   [10:0] j_reg_196;
reg   [0:0] last_reg_207;
reg   [0:0] start_2_reg_219;
reg   [0:0] last_2_reg_229;
reg   [23:0] p_Val2_s_reg_242;
reg   [31:0] rows_reg_394;
reg    ap_block_state1;
reg   [31:0] cols_reg_399;
reg   [23:0] axi_data_V_reg_405;
reg   [0:0] axi_last_V_reg_413;
wire   [0:0] cmp79_i_fu_340_p2;
reg   [0:0] cmp79_i_reg_425;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln128_fu_357_p2;
wire   [10:0] i_2_fu_362_p2;
reg   [10:0] i_2_reg_438;
reg    ap_predicate_op68_read_state5;
reg    ap_block_state5_pp1_stage0_iter0;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] j_2_fu_377_p2;
reg    ap_block_state8;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg   [0:0] axi_last_V_0_reg_143;
reg   [0:0] axi_last_V_4_reg_292;
wire    ap_CS_fsm_state9;
reg   [23:0] axi_data_V_0_reg_153;
reg   [23:0] axi_data_V_4_reg_304;
reg   [10:0] i_reg_163;
reg   [0:0] ap_phi_mux_axi_last_V_1_phi_fu_177_p4;
reg   [23:0] ap_phi_mux_axi_data_V_1_phi_fu_188_p4;
reg   [0:0] ap_phi_mux_last_phi_fu_211_p4;
reg   [0:0] ap_phi_mux_start_2_phi_fu_222_p4;
wire   [0:0] ap_phi_reg_pp1_iter0_last_2_reg_229;
wire   [23:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_242;
reg   [0:0] ap_phi_mux_axi_last_V_4_ph_phi_fu_258_p4;
reg   [0:0] axi_last_V_4_ph_reg_255;
wire    ap_CS_fsm_state7;
reg   [23:0] ap_phi_mux_axi_data_V_4_ph_phi_fu_270_p4;
reg   [23:0] axi_data_V_4_ph_reg_267;
reg   [0:0] ap_phi_mux_last_1_ph_phi_fu_283_p4;
reg   [0:0] last_1_ph_reg_279;
reg   [0:0] last_1_reg_316;
reg   [0:0] start_1_fu_86;
reg    ap_block_pp1_stage0_01001;
wire   [31:0] zext_ln128_fu_353_p1;
wire   [31:0] zext_ln132_fu_368_p1;
wire   [0:0] axi_user_V_fu_336_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [23:0] p_src_TDATA_int_regslice;
wire    p_src_TVALID_int_regslice;
reg    p_src_TREADY_int_regslice;
wire    regslice_both_AXI_video_strm_V_data_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire   [2:0] p_src_TKEEP_int_regslice;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire   [2:0] p_src_TSTRB_int_regslice;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire   [0:0] p_src_TUSER_int_regslice;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire   [0:0] p_src_TLAST_int_regslice;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire   [0:0] p_src_TID_int_regslice;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire   [0:0] p_src_TDEST_int_regslice;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in;
reg    ap_condition_195;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

regslice_both #(
    .DataWidth( 24 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(p_src_TDATA),
    .vld_in(p_src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_data_V_U_ack_in),
    .data_out(p_src_TDATA_int_regslice),
    .vld_out(p_src_TVALID_int_regslice),
    .ack_out(p_src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(p_src_TKEEP),
    .vld_in(p_src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in),
    .data_out(p_src_TKEEP_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(p_src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(p_src_TSTRB),
    .vld_in(p_src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in),
    .data_out(p_src_TSTRB_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(p_src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(p_src_TUSER),
    .vld_in(p_src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in),
    .data_out(p_src_TUSER_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(p_src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(p_src_TLAST),
    .vld_in(p_src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in),
    .data_out(p_src_TLAST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(p_src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(p_src_TID),
    .vld_in(p_src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in),
    .data_out(p_src_TID_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(p_src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(p_src_TDEST),
    .vld_in(p_src_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in),
    .data_out(p_src_TDEST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(p_src_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd1) & (cmp79_i_reg_425 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd1) & (cmp79_i_reg_425 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_data_V_0_reg_153 <= axi_data_V_4_reg_304;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V_0_reg_153 <= axi_data_V_reg_405;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd1) & (cmp79_i_reg_425 == 1'd1))) begin
        axi_data_V_1_reg_185 <= axi_data_V_0_reg_153;
    end else if (((icmp_ln132_reg_443 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_1_reg_185 <= p_Val2_s_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp79_i_reg_425 == 1'd1))) begin
        axi_data_V_4_ph_reg_267 <= axi_data_V_1_reg_185;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd1) & (cmp79_i_reg_425 == 1'd0))) begin
        axi_data_V_4_ph_reg_267 <= axi_data_V_0_reg_153;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_data_V_4_reg_304 <= ap_phi_mux_axi_data_V_4_ph_phi_fu_270_p4;
    end else if ((~((p_src_TVALID_int_regslice == 1'b0) & (last_1_reg_316 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (last_1_reg_316 == 1'd0))) begin
        axi_data_V_4_reg_304 <= p_src_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_last_V_0_reg_143 <= axi_last_V_4_reg_292;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V_0_reg_143 <= axi_last_V_reg_413;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd1) & (cmp79_i_reg_425 == 1'd1))) begin
        axi_last_V_1_reg_174 <= axi_last_V_0_reg_143;
    end else if (((icmp_ln132_reg_443 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_last_V_1_reg_174 <= last_2_reg_229;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp79_i_reg_425 == 1'd1))) begin
        axi_last_V_4_ph_reg_255 <= axi_last_V_1_reg_174;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd1) & (cmp79_i_reg_425 == 1'd0))) begin
        axi_last_V_4_ph_reg_255 <= axi_last_V_0_reg_143;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_last_V_4_reg_292 <= ap_phi_mux_axi_last_V_4_ph_phi_fu_258_p4;
    end else if ((~((p_src_TVALID_int_regslice == 1'b0) & (last_1_reg_316 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (last_1_reg_316 == 1'd0))) begin
        axi_last_V_4_reg_292 <= p_src_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_163 <= i_2_reg_438;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_163 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd1) & (cmp79_i_reg_425 == 1'd1))) begin
        j_reg_196 <= 11'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln132_fu_372_p2 == 1'd0))) begin
        j_reg_196 <= j_2_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp79_i_reg_425 == 1'd1))) begin
        last_1_ph_reg_279 <= last_reg_207;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd1) & (cmp79_i_reg_425 == 1'd0))) begin
        last_1_ph_reg_279 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        last_1_reg_316 <= ap_phi_mux_last_1_ph_phi_fu_283_p4;
    end else if ((~((p_src_TVALID_int_regslice == 1'b0) & (last_1_reg_316 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (last_1_reg_316 == 1'd0))) begin
        last_1_reg_316 <= p_src_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_195)) begin
        if (((or_ln138_fu_383_p2 == 1'd0) & (icmp_ln132_fu_372_p2 == 1'd0))) begin
            last_2_reg_229 <= p_src_TLAST_int_regslice;
        end else if (((or_ln138_fu_383_p2 == 1'd1) & (icmp_ln132_fu_372_p2 == 1'd0))) begin
            last_2_reg_229 <= ap_phi_mux_axi_last_V_1_phi_fu_177_p4;
        end else if ((1'b1 == 1'b1)) begin
            last_2_reg_229 <= ap_phi_reg_pp1_iter0_last_2_reg_229;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd1) & (cmp79_i_reg_425 == 1'd1))) begin
        last_reg_207 <= 1'd0;
    end else if (((icmp_ln132_reg_443 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        last_reg_207 <= last_2_reg_229;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_195)) begin
        if (((or_ln138_fu_383_p2 == 1'd0) & (icmp_ln132_fu_372_p2 == 1'd0))) begin
            p_Val2_s_reg_242 <= p_src_TDATA_int_regslice;
        end else if (((or_ln138_fu_383_p2 == 1'd1) & (icmp_ln132_fu_372_p2 == 1'd0))) begin
            p_Val2_s_reg_242 <= ap_phi_mux_axi_data_V_1_phi_fu_188_p4;
        end else if ((1'b1 == 1'b1)) begin
            p_Val2_s_reg_242 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_242;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp79_i_reg_425 == 1'd1))) begin
        start_1_fu_86 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        start_1_fu_86 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd1) & (cmp79_i_reg_425 == 1'd1))) begin
        start_2_reg_219 <= start_1_fu_86;
    end else if (((icmp_ln132_reg_443 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        start_2_reg_219 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((p_src_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        axi_data_V_reg_405 <= p_src_TDATA_int_regslice;
        axi_last_V_reg_413 <= p_src_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cmp79_i_reg_425 <= cmp79_i_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((img_2_out_full_n == 1'b0) | (img_1_out_full_n == 1'b0) | (img_2_empty_n == 1'b0) | (img_1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_reg_399 <= img_2_dout;
        rows_reg_394 <= img_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_2_reg_438 <= i_2_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln132_reg_443 <= icmp_ln132_fu_372_p2;
    end
end

always @ (*) begin
    if ((icmp_ln132_fu_372_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_443 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_data_V_1_phi_fu_188_p4 = p_Val2_s_reg_242;
    end else begin
        ap_phi_mux_axi_data_V_1_phi_fu_188_p4 = axi_data_V_1_reg_185;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp79_i_reg_425 == 1'd1))) begin
        ap_phi_mux_axi_data_V_4_ph_phi_fu_270_p4 = axi_data_V_1_reg_185;
    end else begin
        ap_phi_mux_axi_data_V_4_ph_phi_fu_270_p4 = axi_data_V_4_ph_reg_267;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_443 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_last_V_1_phi_fu_177_p4 = last_2_reg_229;
    end else begin
        ap_phi_mux_axi_last_V_1_phi_fu_177_p4 = axi_last_V_1_reg_174;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp79_i_reg_425 == 1'd1))) begin
        ap_phi_mux_axi_last_V_4_ph_phi_fu_258_p4 = axi_last_V_1_reg_174;
    end else begin
        ap_phi_mux_axi_last_V_4_ph_phi_fu_258_p4 = axi_last_V_4_ph_reg_255;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (cmp79_i_reg_425 == 1'd1))) begin
        ap_phi_mux_last_1_ph_phi_fu_283_p4 = last_reg_207;
    end else begin
        ap_phi_mux_last_1_ph_phi_fu_283_p4 = last_1_ph_reg_279;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_443 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_last_phi_fu_211_p4 = last_2_reg_229;
    end else begin
        ap_phi_mux_last_phi_fu_211_p4 = last_reg_207;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_443 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_start_2_phi_fu_222_p4 = 1'd0;
    end else begin
        ap_phi_mux_start_2_phi_fu_222_p4 = start_2_reg_219;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_blk_n = img_1_empty_n;
    end else begin
        img_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_out_blk_n = img_1_out_full_n;
    end else begin
        img_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_2_out_full_n == 1'b0) | (img_1_out_full_n == 1'b0) | (img_2_empty_n == 1'b0) | (img_1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_out_write = 1'b1;
    end else begin
        img_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((img_2_out_full_n == 1'b0) | (img_1_out_full_n == 1'b0) | (img_2_empty_n == 1'b0) | (img_1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_1_read = 1'b1;
    end else begin
        img_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_2_blk_n = img_2_empty_n;
    end else begin
        img_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_2_out_blk_n = img_2_out_full_n;
    end else begin
        img_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_2_out_full_n == 1'b0) | (img_1_out_full_n == 1'b0) | (img_2_empty_n == 1'b0) | (img_1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_2_out_write = 1'b1;
    end else begin
        img_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((img_2_out_full_n == 1'b0) | (img_1_out_full_n == 1'b0) | (img_2_empty_n == 1'b0) | (img_1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_2_read = 1'b1;
    end else begin
        img_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_443 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_buf_0_472_blk_n = img_buf_0_472_full_n;
    end else begin
        img_buf_0_472_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_443 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_buf_0_472_write = 1'b1;
    end else begin
        img_buf_0_472_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (or_ln138_fu_383_p2 == 1'd0) & (icmp_ln132_fu_372_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (last_1_reg_316 == 1'd0)))) begin
        p_src_TDATA_blk_n = p_src_TVALID_int_regslice;
    end else begin
        p_src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op68_read_state5 == 1'b1)) | (~((p_src_TVALID_int_regslice == 1'b0) & (last_1_reg_316 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (last_1_reg_316 == 1'd0)) | ((p_src_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        p_src_TREADY_int_regslice = 1'b1;
    end else begin
        p_src_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((img_2_out_full_n == 1'b0) | (img_1_out_full_n == 1'b0) | (img_2_empty_n == 1'b0) | (img_1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((p_src_TVALID_int_regslice == 1'b1) & (axi_user_V_fu_336_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((p_src_TVALID_int_regslice == 1'b1) & (axi_user_V_fu_336_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_357_p2 == 1'd1) & (cmp79_i_reg_425 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln132_fu_372_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln132_fu_372_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((p_src_TVALID_int_regslice == 1'b0) & (last_1_reg_316 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (last_1_reg_316 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((p_src_TVALID_int_regslice == 1'b0) & (last_1_reg_316 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (ap_phi_mux_last_1_phi_fu_319_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (p_src_TVALID_int_regslice == 1'b0) & (ap_predicate_op68_read_state5 == 1'b1)) | ((icmp_ln132_reg_443 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_buf_0_472_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (p_src_TVALID_int_regslice == 1'b0) & (ap_predicate_op68_read_state5 == 1'b1)) | ((icmp_ln132_reg_443 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_buf_0_472_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter0 == 1'b1) & (p_src_TVALID_int_regslice == 1'b0) & (ap_predicate_op68_read_state5 == 1'b1)) | ((icmp_ln132_reg_443 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_buf_0_472_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((img_2_out_full_n == 1'b0) | (img_1_out_full_n == 1'b0) | (img_2_empty_n == 1'b0) | (img_1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp1_stage0_iter0 = ((p_src_TVALID_int_regslice == 1'b0) & (ap_predicate_op68_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((icmp_ln132_reg_443 == 1'd0) & (img_buf_0_472_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((p_src_TVALID_int_regslice == 1'b0) & (last_1_reg_316 == 1'd0));
end

always @ (*) begin
    ap_condition_195 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_last_1_phi_fu_319_p4 = last_1_reg_316;

assign ap_phi_reg_pp1_iter0_last_2_reg_229 = 'bx;

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_242 = 'bx;

always @ (*) begin
    ap_predicate_op68_read_state5 = ((or_ln138_fu_383_p2 == 1'd0) & (icmp_ln132_fu_372_p2 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign axi_user_V_fu_336_p1 = p_src_TUSER_int_regslice;

assign cmp79_i_fu_340_p2 = (($signed(cols_reg_399) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign i_2_fu_362_p2 = (i_reg_163 + 11'd1);

assign icmp_ln128_fu_357_p2 = (($signed(zext_ln128_fu_353_p1) < $signed(rows_reg_394)) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_372_p2 = ((zext_ln132_fu_368_p1 == cols_reg_399) ? 1'b1 : 1'b0);

assign img_1_out_din = img_1_dout;

assign img_2_out_din = img_2_dout;

assign img_buf_0_472_din = p_Val2_s_reg_242;

assign j_2_fu_377_p2 = (j_reg_196 + 11'd1);

assign or_ln138_fu_383_p2 = (ap_phi_mux_start_2_phi_fu_222_p4 | ap_phi_mux_last_phi_fu_211_p4);

assign p_src_TREADY = regslice_both_AXI_video_strm_V_data_V_U_ack_in;

assign start_out = real_start;

assign zext_ln128_fu_353_p1 = i_reg_163;

assign zext_ln132_fu_368_p1 = j_reg_196;

endmodule //hls_sobel_axi_stream_top_AXIvideo2xfMat_24_9_1080_1920_1_s
