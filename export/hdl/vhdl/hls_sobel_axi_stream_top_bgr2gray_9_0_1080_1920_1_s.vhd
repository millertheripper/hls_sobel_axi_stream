-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_sobel_axi_stream_top_bgr2gray_9_0_1080_1920_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_buf_0_472_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    img_buf_0_472_empty_n : IN STD_LOGIC;
    img_buf_0_472_read : OUT STD_LOGIC;
    img_buf_1_473_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_buf_1_473_full_n : IN STD_LOGIC;
    img_buf_1_473_write : OUT STD_LOGIC;
    p_src_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_1_empty_n : IN STD_LOGIC;
    p_src_1_read : OUT STD_LOGIC;
    p_src_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_2_empty_n : IN STD_LOGIC;
    p_src_2_read : OUT STD_LOGIC );
end;


architecture behav of hls_sobel_axi_stream_top_bgr2gray_9_0_1080_1920_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv22_2646 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010011001000110";
    constant ap_const_lv20_E98 : STD_LOGIC_VECTOR (19 downto 0) := "00000000111010011000";
    constant ap_const_lv23_4B23 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100101100100011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_buf_0_472_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln4824_reg_247 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_buf_1_473_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal icmp_ln4824_reg_247_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_1_blk_n : STD_LOGIC;
    signal p_src_2_blk_n : STD_LOGIC;
    signal empty_60_reg_112 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_fu_123_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_reg_228 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal width_fu_127_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal width_reg_233 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln882_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln695_fu_140_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln695_reg_242 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln4824_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln4824_reg_247_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4824_reg_247_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4824_reg_247_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4824_reg_247_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln882_fu_151_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_reg_261 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_reg_261_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal empty_reg_101 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln882_fu_131_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_2_fu_171_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_210_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_219_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_204_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_210_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_210_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_204_ce : STD_LOGIC;
    signal grp_fu_210_ce : STD_LOGIC;
    signal grp_fu_219_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_204_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_210_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_219_p10 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_219_p20 : STD_LOGIC_VECTOR (22 downto 0);

    component hls_sobel_axi_stream_top_mul_mul_15ns_8ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component hls_sobel_axi_stream_top_mac_muladd_13ns_8ns_22ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component hls_sobel_axi_stream_top_mac_muladd_16ns_8ns_22ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    mul_mul_15ns_8ns_22_4_1_U26 : component hls_sobel_axi_stream_top_mul_mul_15ns_8ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 8,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_204_p0,
        din1 => grp_fu_204_p1,
        ce => grp_fu_204_ce,
        dout => grp_fu_204_p2);

    mac_muladd_13ns_8ns_22ns_22_4_1_U27 : component hls_sobel_axi_stream_top_mac_muladd_13ns_8ns_22ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 8,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_210_p0,
        din1 => grp_fu_210_p1,
        din2 => grp_fu_204_p2,
        ce => grp_fu_210_ce,
        dout => grp_fu_210_p3);

    mac_muladd_16ns_8ns_22ns_23_4_1_U28 : component hls_sobel_axi_stream_top_mac_muladd_16ns_8ns_22ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        din2 => grp_fu_219_p2,
        ce => grp_fu_219_ce,
        dout => grp_fu_219_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln882_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln882_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((icmp_ln882_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_60_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4824_fu_146_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                empty_60_reg_112 <= add_ln882_fu_151_p2;
            elsif (((icmp_ln882_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_60_reg_112 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    empty_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                empty_reg_101 <= add_ln695_reg_242;
            elsif ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_101 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln695_reg_242 <= add_ln695_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                height_reg_228 <= height_fu_123_p1;
                width_reg_233 <= width_fu_127_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln4824_reg_247 <= icmp_ln4824_fu_146_p2;
                icmp_ln4824_reg_247_pp0_iter1_reg <= icmp_ln4824_reg_247;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln4824_reg_247_pp0_iter2_reg <= icmp_ln4824_reg_247_pp0_iter1_reg;
                icmp_ln4824_reg_247_pp0_iter3_reg <= icmp_ln4824_reg_247_pp0_iter2_reg;
                icmp_ln4824_reg_247_pp0_iter4_reg <= icmp_ln4824_reg_247_pp0_iter3_reg;
                icmp_ln4824_reg_247_pp0_iter5_reg <= icmp_ln4824_reg_247_pp0_iter4_reg;
                p_1_reg_261_pp0_iter2_reg <= p_1_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4824_reg_247 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_1_reg_261 <= img_buf_0_472_dout(15 downto 8);
                p_reg_256 <= p_fu_157_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, icmp_ln882_fu_135_p2, ap_CS_fsm_state2, icmp_ln4824_fu_146_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln882_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln4824_fu_146_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0)) or ((icmp_ln4824_fu_146_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln695_fu_140_p2 <= std_logic_vector(unsigned(empty_reg_101) + unsigned(ap_const_lv13_1));
    add_ln882_fu_151_p2 <= std_logic_vector(unsigned(empty_60_reg_112) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(img_buf_0_472_empty_n, img_buf_1_473_full_n, ap_enable_reg_pp0_iter1, icmp_ln4824_reg_247, ap_enable_reg_pp0_iter6, icmp_ln4824_reg_247_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln4824_reg_247_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (img_buf_1_473_full_n = ap_const_logic_0)) or ((icmp_ln4824_reg_247 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (img_buf_0_472_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(img_buf_0_472_empty_n, img_buf_1_473_full_n, ap_enable_reg_pp0_iter1, icmp_ln4824_reg_247, ap_enable_reg_pp0_iter6, icmp_ln4824_reg_247_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln4824_reg_247_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (img_buf_1_473_full_n = ap_const_logic_0)) or ((icmp_ln4824_reg_247 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (img_buf_0_472_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(img_buf_0_472_empty_n, img_buf_1_473_full_n, ap_enable_reg_pp0_iter1, icmp_ln4824_reg_247, ap_enable_reg_pp0_iter6, icmp_ln4824_reg_247_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln4824_reg_247_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (img_buf_1_473_full_n = ap_const_logic_0)) or ((icmp_ln4824_reg_247 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (img_buf_0_472_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_1_empty_n, p_src_2_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(img_buf_0_472_empty_n, icmp_ln4824_reg_247)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln4824_reg_247 = ap_const_lv1_0) and (img_buf_0_472_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter6_assign_proc : process(img_buf_1_473_full_n, icmp_ln4824_reg_247_pp0_iter5_reg)
    begin
                ap_block_state9_pp0_stage0_iter6 <= ((icmp_ln4824_reg_247_pp0_iter5_reg = ap_const_lv1_0) and (img_buf_1_473_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln4824_fu_146_p2)
    begin
        if ((icmp_ln4824_fu_146_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln882_fu_135_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln882_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln882_fu_135_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln882_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_204_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_204_ce <= ap_const_logic_1;
        else 
            grp_fu_204_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_204_p0 <= ap_const_lv22_2646(15 - 1 downto 0);
    grp_fu_204_p1 <= grp_fu_204_p10(8 - 1 downto 0);
    grp_fu_204_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_2_fu_171_p4),22));

    grp_fu_210_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_210_ce <= ap_const_logic_1;
        else 
            grp_fu_210_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_210_p0 <= ap_const_lv20_E98(13 - 1 downto 0);
    grp_fu_210_p1 <= grp_fu_210_p10(8 - 1 downto 0);
    grp_fu_210_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_256),20));

    grp_fu_219_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_219_ce <= ap_const_logic_1;
        else 
            grp_fu_219_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_219_p0 <= ap_const_lv23_4B23(16 - 1 downto 0);
    grp_fu_219_p1 <= grp_fu_219_p10(8 - 1 downto 0);
    grp_fu_219_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_261_pp0_iter2_reg),23));
    grp_fu_219_p2 <= grp_fu_219_p20(22 - 1 downto 0);
    grp_fu_219_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_210_p3),23));
    height_fu_123_p1 <= p_src_1_dout(16 - 1 downto 0);
    icmp_ln4824_fu_146_p2 <= "1" when (empty_60_reg_112 = width_reg_233) else "0";
    icmp_ln882_fu_135_p2 <= "1" when (unsigned(zext_ln882_fu_131_p1) < unsigned(height_reg_228)) else "0";

    img_buf_0_472_blk_n_assign_proc : process(img_buf_0_472_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln4824_reg_247)
    begin
        if (((icmp_ln4824_reg_247 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_buf_0_472_blk_n <= img_buf_0_472_empty_n;
        else 
            img_buf_0_472_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_buf_0_472_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln4824_reg_247, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln4824_reg_247 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_buf_0_472_read <= ap_const_logic_1;
        else 
            img_buf_0_472_read <= ap_const_logic_0;
        end if; 
    end process;


    img_buf_1_473_blk_n_assign_proc : process(img_buf_1_473_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, icmp_ln4824_reg_247_pp0_iter5_reg)
    begin
        if (((icmp_ln4824_reg_247_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_buf_1_473_blk_n <= img_buf_1_473_full_n;
        else 
            img_buf_1_473_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_buf_1_473_din <= grp_fu_219_p3(22 downto 15);

    img_buf_1_473_write_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln4824_reg_247_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln4824_reg_247_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_buf_1_473_write <= ap_const_logic_1;
        else 
            img_buf_1_473_write <= ap_const_logic_0;
        end if; 
    end process;

    p_2_fu_171_p4 <= img_buf_0_472_dout(23 downto 16);
    p_fu_157_p1 <= img_buf_0_472_dout(8 - 1 downto 0);

    p_src_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_1_blk_n <= p_src_1_empty_n;
        else 
            p_src_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_1_read <= ap_const_logic_1;
        else 
            p_src_1_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_2_blk_n <= p_src_2_empty_n;
        else 
            p_src_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_2_read <= ap_const_logic_1;
        else 
            p_src_2_read <= ap_const_logic_0;
        end if; 
    end process;

    width_fu_127_p1 <= p_src_2_dout(16 - 1 downto 0);
    zext_ln882_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_101),16));
end behav;
