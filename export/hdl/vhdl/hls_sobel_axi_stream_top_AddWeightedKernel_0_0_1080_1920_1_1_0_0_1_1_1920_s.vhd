-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_sobel_axi_stream_top_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_buf_1a_474_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_buf_1a_474_empty_n : IN STD_LOGIC;
    img_buf_1a_474_read : OUT STD_LOGIC;
    img_buf_1b_475_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_buf_1b_475_empty_n : IN STD_LOGIC;
    img_buf_1b_475_read : OUT STD_LOGIC;
    img_buf_2_476_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_buf_2_476_full_n : IN STD_LOGIC;
    img_buf_2_476_write : OUT STD_LOGIC;
    height : IN STD_LOGIC_VECTOR (15 downto 0);
    width : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of hls_sobel_axi_stream_top_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_buf_1a_474_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln68_reg_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_buf_1b_475_blk_n : STD_LOGIC;
    signal img_buf_2_476_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln68_reg_186_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_84_reg_96 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln882_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln695_fu_116_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln695_reg_181 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln68_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln882_fu_127_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln92_fu_161_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln92_reg_195 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal empty_reg_85 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln882_fu_107_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_133_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_143_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln92_1_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln92_fu_153_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln882_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln882_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_84_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_122_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                empty_84_reg_96 <= add_ln882_fu_127_p2;
            elsif (((icmp_ln882_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_84_reg_96 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    empty_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                empty_reg_85 <= add_ln695_reg_181;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_85 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln695_reg_181 <= add_ln695_fu_116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_186 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln92_reg_195 <= add_ln92_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln68_reg_186 <= icmp_ln68_fu_122_p2;
                icmp_ln68_reg_186_pp0_iter1_reg <= icmp_ln68_reg_186;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln882_fu_111_p2, ap_CS_fsm_state2, icmp_ln68_fu_122_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln882_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln68_fu_122_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln68_fu_122_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln695_fu_116_p2 <= std_logic_vector(unsigned(empty_reg_85) + unsigned(ap_const_lv13_1));
    add_ln882_fu_127_p2 <= std_logic_vector(unsigned(empty_84_reg_96) + unsigned(ap_const_lv16_1));
    add_ln92_fu_161_p2 <= std_logic_vector(unsigned(zext_ln92_1_fu_157_p1) + unsigned(zext_ln92_fu_153_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(img_buf_1a_474_empty_n, img_buf_1b_475_empty_n, img_buf_2_476_full_n, ap_enable_reg_pp0_iter1, icmp_ln68_reg_186, ap_enable_reg_pp0_iter2, icmp_ln68_reg_186_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln68_reg_186_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (img_buf_2_476_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln68_reg_186 = ap_const_lv1_0) and (img_buf_1b_475_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_186 = ap_const_lv1_0) and (img_buf_1a_474_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(img_buf_1a_474_empty_n, img_buf_1b_475_empty_n, img_buf_2_476_full_n, ap_enable_reg_pp0_iter1, icmp_ln68_reg_186, ap_enable_reg_pp0_iter2, icmp_ln68_reg_186_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln68_reg_186_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (img_buf_2_476_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln68_reg_186 = ap_const_lv1_0) and (img_buf_1b_475_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_186 = ap_const_lv1_0) and (img_buf_1a_474_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(img_buf_1a_474_empty_n, img_buf_1b_475_empty_n, img_buf_2_476_full_n, ap_enable_reg_pp0_iter1, icmp_ln68_reg_186, ap_enable_reg_pp0_iter2, icmp_ln68_reg_186_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln68_reg_186_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (img_buf_2_476_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln68_reg_186 = ap_const_lv1_0) and (img_buf_1b_475_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_186 = ap_const_lv1_0) and (img_buf_1a_474_empty_n = ap_const_logic_0)))));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(img_buf_1a_474_empty_n, img_buf_1b_475_empty_n, icmp_ln68_reg_186)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((icmp_ln68_reg_186 = ap_const_lv1_0) and (img_buf_1b_475_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_186 = ap_const_lv1_0) and (img_buf_1a_474_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(img_buf_2_476_full_n, icmp_ln68_reg_186_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((icmp_ln68_reg_186_pp0_iter1_reg = ap_const_lv1_0) and (img_buf_2_476_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln68_fu_122_p2)
    begin
        if ((icmp_ln68_fu_122_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln882_fu_111_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln882_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln882_fu_111_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln882_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln68_fu_122_p2 <= "1" when (empty_84_reg_96 = width) else "0";
    icmp_ln882_fu_111_p2 <= "1" when (unsigned(zext_ln882_fu_107_p1) < unsigned(height)) else "0";

    img_buf_1a_474_blk_n_assign_proc : process(img_buf_1a_474_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln68_reg_186)
    begin
        if (((icmp_ln68_reg_186 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_buf_1a_474_blk_n <= img_buf_1a_474_empty_n;
        else 
            img_buf_1a_474_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_buf_1a_474_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln68_reg_186, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_reg_186 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_buf_1a_474_read <= ap_const_logic_1;
        else 
            img_buf_1a_474_read <= ap_const_logic_0;
        end if; 
    end process;


    img_buf_1b_475_blk_n_assign_proc : process(img_buf_1b_475_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln68_reg_186)
    begin
        if (((icmp_ln68_reg_186 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_buf_1b_475_blk_n <= img_buf_1b_475_empty_n;
        else 
            img_buf_1b_475_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_buf_1b_475_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln68_reg_186, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_reg_186 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_buf_1b_475_read <= ap_const_logic_1;
        else 
            img_buf_1b_475_read <= ap_const_logic_0;
        end if; 
    end process;


    img_buf_2_476_blk_n_assign_proc : process(img_buf_2_476_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln68_reg_186_pp0_iter1_reg)
    begin
        if (((icmp_ln68_reg_186_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_buf_2_476_blk_n <= img_buf_2_476_full_n;
        else 
            img_buf_2_476_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_buf_2_476_din <= add_ln92_reg_195;

    img_buf_2_476_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln68_reg_186_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_reg_186_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_buf_2_476_write <= ap_const_logic_1;
        else 
            img_buf_2_476_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_143_p4 <= img_buf_1b_475_dout(7 downto 1);
    tmp_fu_133_p4 <= img_buf_1a_474_dout(7 downto 1);
    zext_ln882_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_85),16));
    zext_ln92_1_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_143_p4),8));
    zext_ln92_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_133_p4),8));
end behav;
