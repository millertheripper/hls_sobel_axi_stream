-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_sobel_axi_stream_top_addWeighted_0_0_1080_1920_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_buf_1a_474_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_buf_1a_474_empty_n : IN STD_LOGIC;
    img_buf_1a_474_read : OUT STD_LOGIC;
    img_buf_1b_475_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_buf_1b_475_empty_n : IN STD_LOGIC;
    img_buf_1b_475_read : OUT STD_LOGIC;
    img_buf_2_476_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_buf_2_476_full_n : IN STD_LOGIC;
    img_buf_2_476_write : OUT STD_LOGIC;
    src1_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src1_1_empty_n : IN STD_LOGIC;
    src1_1_read : OUT STD_LOGIC;
    src1_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src1_2_empty_n : IN STD_LOGIC;
    src1_2_read : OUT STD_LOGIC );
end;


architecture behav of hls_sobel_axi_stream_top_addWeighted_0_0_1080_1920_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src1_1_blk_n : STD_LOGIC;
    signal src1_2_blk_n : STD_LOGIC;
    signal width_fu_56_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal width_reg_66 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln123_fu_61_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln123_reg_71 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start : STD_LOGIC;
    signal grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done : STD_LOGIC;
    signal grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_idle : STD_LOGIC;
    signal grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_ready : STD_LOGIC;
    signal grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1a_474_read : STD_LOGIC;
    signal grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1b_475_read : STD_LOGIC;
    signal grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_write : STD_LOGIC;
    signal grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call12 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component hls_sobel_axi_stream_top_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_buf_1a_474_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_buf_1a_474_empty_n : IN STD_LOGIC;
        img_buf_1a_474_read : OUT STD_LOGIC;
        img_buf_1b_475_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_buf_1b_475_empty_n : IN STD_LOGIC;
        img_buf_1b_475_read : OUT STD_LOGIC;
        img_buf_2_476_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_buf_2_476_full_n : IN STD_LOGIC;
        img_buf_2_476_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44 : component hls_sobel_axi_stream_top_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start,
        ap_done => grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done,
        ap_idle => grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_idle,
        ap_ready => grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_ready,
        img_buf_1a_474_dout => img_buf_1a_474_dout,
        img_buf_1a_474_empty_n => img_buf_1a_474_empty_n,
        img_buf_1a_474_read => grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1a_474_read,
        img_buf_1b_475_dout => img_buf_1b_475_dout,
        img_buf_1b_475_empty_n => img_buf_1b_475_empty_n,
        img_buf_1b_475_read => grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1b_475_read,
        img_buf_2_476_din => grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_din,
        img_buf_2_476_full_n => img_buf_2_476_full_n,
        img_buf_2_476_write => grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_write,
        height => trunc_ln123_reg_71,
        width => width_reg_66);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (src1_2_empty_n = ap_const_logic_0) or (src1_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_ready = ap_const_logic_1)) then 
                    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (src1_2_empty_n = ap_const_logic_0) or (src1_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln123_reg_71 <= trunc_ln123_fu_61_p1;
                width_reg_66 <= width_fu_56_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src1_1_empty_n, src1_2_empty_n, grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (src1_2_empty_n = ap_const_logic_0) or (src1_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, src1_1_empty_n, src1_2_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (src1_2_empty_n = ap_const_logic_0) or (src1_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call12_assign_proc : process(ap_start, ap_done_reg, src1_1_empty_n, src1_2_empty_n)
    begin
                ap_block_state1_ignore_call12 <= ((ap_start = ap_const_logic_0) or (src1_2_empty_n = ap_const_logic_0) or (src1_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start <= grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_ap_start_reg;

    img_buf_1a_474_read_assign_proc : process(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1a_474_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_buf_1a_474_read <= grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1a_474_read;
        else 
            img_buf_1a_474_read <= ap_const_logic_0;
        end if; 
    end process;


    img_buf_1b_475_read_assign_proc : process(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1b_475_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_buf_1b_475_read <= grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_1b_475_read;
        else 
            img_buf_1b_475_read <= ap_const_logic_0;
        end if; 
    end process;

    img_buf_2_476_din <= grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_din;

    img_buf_2_476_write_assign_proc : process(grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_buf_2_476_write <= grp_AddWeightedKernel_0_0_1080_1920_1_1_0_0_1_1_1920_s_fu_44_img_buf_2_476_write;
        else 
            img_buf_2_476_write <= ap_const_logic_0;
        end if; 
    end process;


    src1_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src1_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src1_1_blk_n <= src1_1_empty_n;
        else 
            src1_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src1_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src1_1_empty_n, src1_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (src1_2_empty_n = ap_const_logic_0) or (src1_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src1_1_read <= ap_const_logic_1;
        else 
            src1_1_read <= ap_const_logic_0;
        end if; 
    end process;


    src1_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src1_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src1_2_blk_n <= src1_2_empty_n;
        else 
            src1_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src1_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src1_1_empty_n, src1_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (src1_2_empty_n = ap_const_logic_0) or (src1_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src1_2_read <= ap_const_logic_1;
        else 
            src1_2_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln123_fu_61_p1 <= src1_1_dout(16 - 1 downto 0);
    width_fu_56_p1 <= src1_2_dout(16 - 1 downto 0);
end behav;
