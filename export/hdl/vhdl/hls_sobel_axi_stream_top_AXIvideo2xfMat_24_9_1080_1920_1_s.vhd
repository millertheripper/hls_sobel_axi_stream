-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_sobel_axi_stream_top_AXIvideo2xfMat_24_9_1080_1920_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    img_buf_0_472_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    img_buf_0_472_full_n : IN STD_LOGIC;
    img_buf_0_472_write : OUT STD_LOGIC;
    p_src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    p_src_TVALID : IN STD_LOGIC;
    p_src_TREADY : OUT STD_LOGIC;
    p_src_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    p_src_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    p_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    img_1_empty_n : IN STD_LOGIC;
    img_1_read : OUT STD_LOGIC;
    img_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    img_2_empty_n : IN STD_LOGIC;
    img_2_read : OUT STD_LOGIC;
    img_1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_1_out_full_n : IN STD_LOGIC;
    img_1_out_write : OUT STD_LOGIC;
    img_2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_2_out_full_n : IN STD_LOGIC;
    img_2_out_write : OUT STD_LOGIC );
end;


architecture behav of hls_sobel_axi_stream_top_AXIvideo2xfMat_24_9_1080_1920_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal img_buf_0_472_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln132_reg_443 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln132_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_phi_mux_last_1_phi_fu_319_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_1_blk_n : STD_LOGIC;
    signal img_2_blk_n : STD_LOGIC;
    signal img_1_out_blk_n : STD_LOGIC;
    signal img_2_out_blk_n : STD_LOGIC;
    signal axi_last_V_1_reg_174 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_reg_185 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_reg_196 : STD_LOGIC_VECTOR (10 downto 0);
    signal last_reg_207 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_2_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_2_reg_229 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_242 : STD_LOGIC_VECTOR (23 downto 0);
    signal rows_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_data_V_reg_405 : STD_LOGIC_VECTOR (23 downto 0);
    signal axi_last_V_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp79_i_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp79_i_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln128_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_362_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_438 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_predicate_op68_read_state5 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal j_2_fu_377_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal axi_last_V_0_reg_143 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_4_reg_292 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal axi_data_V_0_reg_153 : STD_LOGIC_VECTOR (23 downto 0);
    signal axi_data_V_4_reg_304 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_reg_163 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_axi_last_V_1_phi_fu_177_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_axi_data_V_1_phi_fu_188_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_mux_last_phi_fu_211_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_start_2_phi_fu_222_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp1_iter0_last_2_reg_229 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp1_iter0_p_Val2_s_reg_242 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_mux_axi_last_V_4_ph_phi_fu_258_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_4_ph_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_axi_data_V_4_ph_phi_fu_270_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal axi_data_V_4_ph_reg_267 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_mux_last_1_ph_phi_fu_283_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_1_ph_reg_279 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_1_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_1_fu_86 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal zext_ln128_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln132_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_user_V_fu_336_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_data_V_U_apdone_blk : STD_LOGIC;
    signal p_src_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal p_src_TVALID_int_regslice : STD_LOGIC;
    signal p_src_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal p_src_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_AXI_video_strm_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal p_src_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_AXI_video_strm_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_user_V_U_apdone_blk : STD_LOGIC;
    signal p_src_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_last_V_U_apdone_blk : STD_LOGIC;
    signal p_src_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_id_V_U_apdone_blk : STD_LOGIC;
    signal p_src_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal p_src_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_AXI_video_strm_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_condition_195 : BOOLEAN;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_AXI_video_strm_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => p_src_TDATA,
        vld_in => p_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_data_V_U_ack_in,
        data_out => p_src_TDATA_int_regslice,
        vld_out => p_src_TVALID_int_regslice,
        ack_out => p_src_TREADY_int_regslice,
        apdone_blk => regslice_both_AXI_video_strm_V_data_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => p_src_TKEEP,
        vld_in => p_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_keep_V_U_ack_in,
        data_out => p_src_TKEEP_int_regslice,
        vld_out => regslice_both_AXI_video_strm_V_keep_V_U_vld_out,
        ack_out => p_src_TREADY_int_regslice,
        apdone_blk => regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => p_src_TSTRB,
        vld_in => p_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_strb_V_U_ack_in,
        data_out => p_src_TSTRB_int_regslice,
        vld_out => regslice_both_AXI_video_strm_V_strb_V_U_vld_out,
        ack_out => p_src_TREADY_int_regslice,
        apdone_blk => regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => p_src_TUSER,
        vld_in => p_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_user_V_U_ack_in,
        data_out => p_src_TUSER_int_regslice,
        vld_out => regslice_both_AXI_video_strm_V_user_V_U_vld_out,
        ack_out => p_src_TREADY_int_regslice,
        apdone_blk => regslice_both_AXI_video_strm_V_user_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => p_src_TLAST,
        vld_in => p_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_last_V_U_ack_in,
        data_out => p_src_TLAST_int_regslice,
        vld_out => regslice_both_AXI_video_strm_V_last_V_U_vld_out,
        ack_out => p_src_TREADY_int_regslice,
        apdone_blk => regslice_both_AXI_video_strm_V_last_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => p_src_TID,
        vld_in => p_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_id_V_U_ack_in,
        data_out => p_src_TID_int_regslice,
        vld_out => regslice_both_AXI_video_strm_V_id_V_U_vld_out,
        ack_out => p_src_TREADY_int_regslice,
        apdone_blk => regslice_both_AXI_video_strm_V_id_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => p_src_TDEST,
        vld_in => p_src_TVALID,
        ack_in => regslice_both_AXI_video_strm_V_dest_V_U_ack_in,
        data_out => p_src_TDEST_int_regslice,
        vld_out => regslice_both_AXI_video_strm_V_dest_V_U_vld_out,
        ack_out => p_src_TREADY_int_regslice,
        apdone_blk => regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_1) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_1) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axi_data_V_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axi_data_V_0_reg_153 <= axi_data_V_4_reg_304;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_data_V_0_reg_153 <= axi_data_V_reg_405;
            end if; 
        end if;
    end process;

    axi_data_V_1_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_1) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
                axi_data_V_1_reg_185 <= axi_data_V_0_reg_153;
            elsif (((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                axi_data_V_1_reg_185 <= p_Val2_s_reg_242;
            end if; 
        end if;
    end process;

    axi_data_V_4_ph_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
                axi_data_V_4_ph_reg_267 <= axi_data_V_1_reg_185;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_1) and (cmp79_i_reg_425 = ap_const_lv1_0))) then 
                axi_data_V_4_ph_reg_267 <= axi_data_V_0_reg_153;
            end if; 
        end if;
    end process;

    axi_data_V_4_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                axi_data_V_4_reg_304 <= ap_phi_mux_axi_data_V_4_ph_phi_fu_270_p4;
            elsif ((not(((p_src_TVALID_int_regslice = ap_const_logic_0) and (last_1_reg_316 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (last_1_reg_316 = ap_const_lv1_0))) then 
                axi_data_V_4_reg_304 <= p_src_TDATA_int_regslice;
            end if; 
        end if;
    end process;

    axi_last_V_0_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axi_last_V_0_reg_143 <= axi_last_V_4_reg_292;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_last_V_0_reg_143 <= axi_last_V_reg_413;
            end if; 
        end if;
    end process;

    axi_last_V_1_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_1) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
                axi_last_V_1_reg_174 <= axi_last_V_0_reg_143;
            elsif (((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                axi_last_V_1_reg_174 <= last_2_reg_229;
            end if; 
        end if;
    end process;

    axi_last_V_4_ph_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
                axi_last_V_4_ph_reg_255 <= axi_last_V_1_reg_174;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_1) and (cmp79_i_reg_425 = ap_const_lv1_0))) then 
                axi_last_V_4_ph_reg_255 <= axi_last_V_0_reg_143;
            end if; 
        end if;
    end process;

    axi_last_V_4_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                axi_last_V_4_reg_292 <= ap_phi_mux_axi_last_V_4_ph_phi_fu_258_p4;
            elsif ((not(((p_src_TVALID_int_regslice = ap_const_logic_0) and (last_1_reg_316 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (last_1_reg_316 = ap_const_lv1_0))) then 
                axi_last_V_4_reg_292 <= p_src_TLAST_int_regslice;
            end if; 
        end if;
    end process;

    i_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_163 <= i_2_reg_438;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_163 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_1) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
                j_reg_196 <= ap_const_lv11_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln132_fu_372_p2 = ap_const_lv1_0))) then 
                j_reg_196 <= j_2_fu_377_p2;
            end if; 
        end if;
    end process;

    last_1_ph_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
                last_1_ph_reg_279 <= last_reg_207;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_1) and (cmp79_i_reg_425 = ap_const_lv1_0))) then 
                last_1_ph_reg_279 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    last_1_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                last_1_reg_316 <= ap_phi_mux_last_1_ph_phi_fu_283_p4;
            elsif ((not(((p_src_TVALID_int_regslice = ap_const_logic_0) and (last_1_reg_316 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (last_1_reg_316 = ap_const_lv1_0))) then 
                last_1_reg_316 <= p_src_TLAST_int_regslice;
            end if; 
        end if;
    end process;

    last_2_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_195)) then
                if (((or_ln138_fu_383_p2 = ap_const_lv1_0) and (icmp_ln132_fu_372_p2 = ap_const_lv1_0))) then 
                    last_2_reg_229 <= p_src_TLAST_int_regslice;
                elsif (((or_ln138_fu_383_p2 = ap_const_lv1_1) and (icmp_ln132_fu_372_p2 = ap_const_lv1_0))) then 
                    last_2_reg_229 <= ap_phi_mux_axi_last_V_1_phi_fu_177_p4;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    last_2_reg_229 <= ap_phi_reg_pp1_iter0_last_2_reg_229;
                end if;
            end if; 
        end if;
    end process;

    last_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_1) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
                last_reg_207 <= ap_const_lv1_0;
            elsif (((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                last_reg_207 <= last_2_reg_229;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_195)) then
                if (((or_ln138_fu_383_p2 = ap_const_lv1_0) and (icmp_ln132_fu_372_p2 = ap_const_lv1_0))) then 
                    p_Val2_s_reg_242 <= p_src_TDATA_int_regslice;
                elsif (((or_ln138_fu_383_p2 = ap_const_lv1_1) and (icmp_ln132_fu_372_p2 = ap_const_lv1_0))) then 
                    p_Val2_s_reg_242 <= ap_phi_mux_axi_data_V_1_phi_fu_188_p4;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    p_Val2_s_reg_242 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_242;
                end if;
            end if; 
        end if;
    end process;

    start_1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
                start_1_fu_86 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                start_1_fu_86 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    start_2_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_1) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
                start_2_reg_219 <= start_1_fu_86;
            elsif (((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                start_2_reg_219 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_src_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                axi_data_V_reg_405 <= p_src_TDATA_int_regslice;
                axi_last_V_reg_413 <= p_src_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                cmp79_i_reg_425 <= cmp79_i_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((img_2_out_full_n = ap_const_logic_0) or (img_1_out_full_n = ap_const_logic_0) or (img_2_empty_n = ap_const_logic_0) or (img_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_reg_399 <= img_2_dout;
                rows_reg_394 <= img_1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_2_reg_438 <= i_2_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln132_reg_443 <= icmp_ln132_fu_372_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, img_1_empty_n, img_2_empty_n, img_1_out_full_n, img_2_out_full_n, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, icmp_ln132_fu_372_p2, ap_CS_fsm_state8, ap_phi_mux_last_1_phi_fu_319_p4, cmp79_i_reg_425, ap_CS_fsm_state4, icmp_ln128_fu_357_p2, ap_block_pp1_stage0_subdone, last_1_reg_316, axi_user_V_fu_336_p1, p_src_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((img_2_out_full_n = ap_const_logic_0) or (img_1_out_full_n = ap_const_logic_0) or (img_2_empty_n = ap_const_logic_0) or (img_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((p_src_TVALID_int_regslice = ap_const_logic_1) and (axi_user_V_fu_336_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((p_src_TVALID_int_regslice = ap_const_logic_1) and (axi_user_V_fu_336_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_1) and (cmp79_i_reg_425 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln132_fu_372_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln132_fu_372_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((p_src_TVALID_int_regslice = ap_const_logic_0) and (last_1_reg_316 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (last_1_reg_316 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif ((not(((p_src_TVALID_int_regslice = ap_const_logic_0) and (last_1_reg_316 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_phi_mux_last_1_phi_fu_319_p4 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(img_buf_0_472_full_n, ap_enable_reg_pp1_iter1, icmp_ln132_reg_443, ap_enable_reg_pp1_iter0, ap_predicate_op68_read_state5, p_src_TVALID_int_regslice)
    begin
                ap_block_pp1_stage0_01001 <= (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (p_src_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op68_read_state5 = ap_const_boolean_1)) or ((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (img_buf_0_472_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(img_buf_0_472_full_n, ap_enable_reg_pp1_iter1, icmp_ln132_reg_443, ap_enable_reg_pp1_iter0, ap_predicate_op68_read_state5, p_src_TVALID_int_regslice)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (p_src_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op68_read_state5 = ap_const_boolean_1)) or ((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (img_buf_0_472_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(img_buf_0_472_full_n, ap_enable_reg_pp1_iter1, icmp_ln132_reg_443, ap_enable_reg_pp1_iter0, ap_predicate_op68_read_state5, p_src_TVALID_int_regslice)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (p_src_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op68_read_state5 = ap_const_boolean_1)) or ((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (img_buf_0_472_full_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, img_1_empty_n, img_2_empty_n, img_1_out_full_n, img_2_out_full_n)
    begin
                ap_block_state1 <= ((img_2_out_full_n = ap_const_logic_0) or (img_1_out_full_n = ap_const_logic_0) or (img_2_empty_n = ap_const_logic_0) or (img_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state5_pp1_stage0_iter0_assign_proc : process(ap_predicate_op68_read_state5, p_src_TVALID_int_regslice)
    begin
                ap_block_state5_pp1_stage0_iter0 <= ((p_src_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op68_read_state5 = ap_const_boolean_1));
    end process;


    ap_block_state6_pp1_stage0_iter1_assign_proc : process(img_buf_0_472_full_n, icmp_ln132_reg_443)
    begin
                ap_block_state6_pp1_stage0_iter1 <= ((icmp_ln132_reg_443 = ap_const_lv1_0) and (img_buf_0_472_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(last_1_reg_316, p_src_TVALID_int_regslice)
    begin
                ap_block_state8 <= ((p_src_TVALID_int_regslice = ap_const_logic_0) and (last_1_reg_316 = ap_const_lv1_0));
    end process;


    ap_condition_195_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
                ap_condition_195 <= ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln132_fu_372_p2)
    begin
        if ((icmp_ln132_fu_372_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, icmp_ln128_fu_357_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_axi_data_V_1_phi_fu_188_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln132_reg_443, axi_data_V_1_reg_185, p_Val2_s_reg_242)
    begin
        if (((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_axi_data_V_1_phi_fu_188_p4 <= p_Val2_s_reg_242;
        else 
            ap_phi_mux_axi_data_V_1_phi_fu_188_p4 <= axi_data_V_1_reg_185;
        end if; 
    end process;


    ap_phi_mux_axi_data_V_4_ph_phi_fu_270_p4_assign_proc : process(axi_data_V_1_reg_185, cmp79_i_reg_425, ap_CS_fsm_state7, axi_data_V_4_ph_reg_267)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
            ap_phi_mux_axi_data_V_4_ph_phi_fu_270_p4 <= axi_data_V_1_reg_185;
        else 
            ap_phi_mux_axi_data_V_4_ph_phi_fu_270_p4 <= axi_data_V_4_ph_reg_267;
        end if; 
    end process;


    ap_phi_mux_axi_last_V_1_phi_fu_177_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln132_reg_443, axi_last_V_1_reg_174, last_2_reg_229)
    begin
        if (((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_axi_last_V_1_phi_fu_177_p4 <= last_2_reg_229;
        else 
            ap_phi_mux_axi_last_V_1_phi_fu_177_p4 <= axi_last_V_1_reg_174;
        end if; 
    end process;


    ap_phi_mux_axi_last_V_4_ph_phi_fu_258_p4_assign_proc : process(axi_last_V_1_reg_174, cmp79_i_reg_425, axi_last_V_4_ph_reg_255, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
            ap_phi_mux_axi_last_V_4_ph_phi_fu_258_p4 <= axi_last_V_1_reg_174;
        else 
            ap_phi_mux_axi_last_V_4_ph_phi_fu_258_p4 <= axi_last_V_4_ph_reg_255;
        end if; 
    end process;


    ap_phi_mux_last_1_ph_phi_fu_283_p4_assign_proc : process(last_reg_207, cmp79_i_reg_425, ap_CS_fsm_state7, last_1_ph_reg_279)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (cmp79_i_reg_425 = ap_const_lv1_1))) then 
            ap_phi_mux_last_1_ph_phi_fu_283_p4 <= last_reg_207;
        else 
            ap_phi_mux_last_1_ph_phi_fu_283_p4 <= last_1_ph_reg_279;
        end if; 
    end process;

    ap_phi_mux_last_1_phi_fu_319_p4 <= last_1_reg_316;

    ap_phi_mux_last_phi_fu_211_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln132_reg_443, last_reg_207, last_2_reg_229)
    begin
        if (((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_last_phi_fu_211_p4 <= last_2_reg_229;
        else 
            ap_phi_mux_last_phi_fu_211_p4 <= last_reg_207;
        end if; 
    end process;


    ap_phi_mux_start_2_phi_fu_222_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln132_reg_443, start_2_reg_219)
    begin
        if (((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_start_2_phi_fu_222_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_start_2_phi_fu_222_p4 <= start_2_reg_219;
        end if; 
    end process;

    ap_phi_reg_pp1_iter0_last_2_reg_229 <= "X";
    ap_phi_reg_pp1_iter0_p_Val2_s_reg_242 <= "XXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op68_read_state5_assign_proc : process(icmp_ln132_fu_372_p2, or_ln138_fu_383_p2)
    begin
                ap_predicate_op68_read_state5 <= ((or_ln138_fu_383_p2 = ap_const_lv1_0) and (icmp_ln132_fu_372_p2 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;
    axi_user_V_fu_336_p1 <= p_src_TUSER_int_regslice;
    cmp79_i_fu_340_p2 <= "1" when (signed(cols_reg_399) > signed(ap_const_lv32_0)) else "0";
    i_2_fu_362_p2 <= std_logic_vector(unsigned(i_reg_163) + unsigned(ap_const_lv11_1));
    icmp_ln128_fu_357_p2 <= "1" when (signed(zext_ln128_fu_353_p1) < signed(rows_reg_394)) else "0";
    icmp_ln132_fu_372_p2 <= "1" when (zext_ln132_fu_368_p1 = cols_reg_399) else "0";

    img_1_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_1_blk_n <= img_1_empty_n;
        else 
            img_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_1_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_1_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_1_out_blk_n <= img_1_out_full_n;
        else 
            img_1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_1_out_din <= img_1_dout;

    img_1_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_1_empty_n, img_2_empty_n, img_1_out_full_n, img_2_out_full_n)
    begin
        if ((not(((img_2_out_full_n = ap_const_logic_0) or (img_1_out_full_n = ap_const_logic_0) or (img_2_empty_n = ap_const_logic_0) or (img_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_1_out_write <= ap_const_logic_1;
        else 
            img_1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_1_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_1_empty_n, img_2_empty_n, img_1_out_full_n, img_2_out_full_n)
    begin
        if ((not(((img_2_out_full_n = ap_const_logic_0) or (img_1_out_full_n = ap_const_logic_0) or (img_2_empty_n = ap_const_logic_0) or (img_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_1_read <= ap_const_logic_1;
        else 
            img_1_read <= ap_const_logic_0;
        end if; 
    end process;


    img_2_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_2_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_2_blk_n <= img_2_empty_n;
        else 
            img_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_2_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_2_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_2_out_blk_n <= img_2_out_full_n;
        else 
            img_2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_2_out_din <= img_2_dout;

    img_2_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_1_empty_n, img_2_empty_n, img_1_out_full_n, img_2_out_full_n)
    begin
        if ((not(((img_2_out_full_n = ap_const_logic_0) or (img_1_out_full_n = ap_const_logic_0) or (img_2_empty_n = ap_const_logic_0) or (img_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_2_out_write <= ap_const_logic_1;
        else 
            img_2_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_2_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_1_empty_n, img_2_empty_n, img_1_out_full_n, img_2_out_full_n)
    begin
        if ((not(((img_2_out_full_n = ap_const_logic_0) or (img_1_out_full_n = ap_const_logic_0) or (img_2_empty_n = ap_const_logic_0) or (img_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_2_read <= ap_const_logic_1;
        else 
            img_2_read <= ap_const_logic_0;
        end if; 
    end process;


    img_buf_0_472_blk_n_assign_proc : process(img_buf_0_472_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln132_reg_443)
    begin
        if (((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            img_buf_0_472_blk_n <= img_buf_0_472_full_n;
        else 
            img_buf_0_472_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_buf_0_472_din <= p_Val2_s_reg_242;

    img_buf_0_472_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln132_reg_443, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln132_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            img_buf_0_472_write <= ap_const_logic_1;
        else 
            img_buf_0_472_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln128_fu_357_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln128_fu_357_p2 = ap_const_lv1_0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_377_p2 <= std_logic_vector(unsigned(j_reg_196) + unsigned(ap_const_lv11_1));
    or_ln138_fu_383_p2 <= (ap_phi_mux_start_2_phi_fu_222_p4 or ap_phi_mux_last_phi_fu_211_p4);

    p_src_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, icmp_ln132_fu_372_p2, or_ln138_fu_383_p2, ap_CS_fsm_state8, last_1_reg_316, p_src_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (or_ln138_fu_383_p2 = ap_const_lv1_0) and (icmp_ln132_fu_372_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (last_1_reg_316 = ap_const_lv1_0)))) then 
            p_src_TDATA_blk_n <= p_src_TVALID_int_regslice;
        else 
            p_src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_src_TREADY <= regslice_both_AXI_video_strm_V_data_V_U_ack_in;

    p_src_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state8, ap_predicate_op68_read_state5, ap_block_pp1_stage0_11001, last_1_reg_316, p_src_TVALID_int_regslice)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_predicate_op68_read_state5 = ap_const_boolean_1)) or (not(((p_src_TVALID_int_regslice = ap_const_logic_0) and (last_1_reg_316 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (last_1_reg_316 = ap_const_lv1_0)) or ((p_src_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            p_src_TREADY_int_regslice <= ap_const_logic_1;
        else 
            p_src_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln128_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_163),32));
    zext_ln132_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_196),32));
end behav;
